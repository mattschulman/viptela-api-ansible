---
# Get the vedge info from vManage - only get valid devices so that keys like 'host-name' are present.
- name: "# Get edge device info from vManage"
  uri:
    url: "https://{{ ansible_host }}/dataservice/system/device/vedges/?validity=valid"
    method: GET
    headers:
      Cookie: "{{ login_result.set_cookie }}"
    validate_certs: no
    return_content: yes
  register: pre_setDefault_software_result

# Validate that for each device in the input list, the version is in the availableVersions list for the device or 
# is the active version.  The validatedSetDefaultVersionDeviceDictList list will only contain devices that have versions that can be set to default.
- name: "# Validate that input versions are installed"
  ansible.builtin.set_fact:
    validatedSetDefaultVersionDeviceDictList: "{{ deviceDictList |  validate_setDefault_versions(pre_setDefault_software_result.json.data) }}"

- debug: var=validatedSetDefaultVersionDeviceDictList

# For devices that the input version is not valid, generate a list of skipped devices to be displayed at the end.
- name: "# Generate Skipped device list for devices that do not have the version installed"
  ansible.builtin.set_fact:
    skippedSetDefaultDeviceDictList: "{{ deviceDictList |  create_setDefault_skipped_versions(pre_setDefault_software_result.json.data) }}"

# If there are entries in the validatedSetDefaultVersionDeviceDictList:
- block:
  # Build the POST body
  - name: "# Generate the body for the Set Default POST message"
    ansible.builtin.set_fact:
      payloadDict: "{{ validatedSetDefaultVersionDeviceDictList | generate_setDefault_payload }}"

  - debug: var=payloadDict

  # Build the POST message and send to vManage, getting the jobID back.
  - name: "# Set Default Version on Edge Router"
    uri:
      method: POST
      url: "https://{{ ansible_host }}/dataservice/device/action/defaultpartition"
      headers:
        Cookie: "{{ login_result.set_cookie }}"
        X-XSRF-TOKEN: "{{ token_result.content }}"
        Content-Type: 'application/json'
      body_format: json
      body: "{{ payloadDict }}"
      validate_certs: no
    register: setDefault_result

  - debug: var=setDefault_result.json.id

  # Keep querying the jobID until the status is 'done'.
  - name: Get default version status and repeat until Complete - FAILED == In Progress
    uri:
      method: GET
      url: "https://{{ ansible_host }}/dataservice/device/action/status/{{ setDefault_result.json.id }}"
      headers:
        Cookie: "{{ login_result.set_cookie }}"
      validate_certs: no
      return_content: yes
    register: setDefault_status
    until: setDefault_status.json.summary.status == 'done'
    retries: 60
    delay: 60


  - debug:
      msg:
        currentActivity: "{{ setDefault_status.json.data[0].currentActivity }}"
        status: "{{ setDefault_status.json.data[0].status }}" 
        activity: "{{ setDefault_status.json.data[0].activity }}"


  # Get the valid vedge device info again so that the set-default actions can be verified.
  - name: "# Get edge device info from vManage"
    uri:
      url: "https://{{ ansible_host }}/dataservice/system/device/vedges/?validity=valid"
      method: GET
      headers:
        Cookie: "{{ login_result.set_cookie }}"
      validate_certs: no
      return_content: yes
    register: post_setDefault_software_result

  # Loop through the devices in the validatedSetDefaultVersionDeviceDictList, run the external tasks, passing in the device data for the hostname
  # for the device in the loop.
  - name: "# Validate set default"
    ansible.builtin.include_tasks:
      file: "validate_set_default.yml"
    vars:
      postSetDefaultResultItem: "{{ post_setDefault_software_result.json.data | selectattr('host-name', 'defined') | selectattr('host-name', 'equalto', post_setDefault_Item['hostname']) | list }}"
    loop: "{{ validatedSetDefaultVersionDeviceDictList }}"
    loop_control:
      loop_var: post_setDefault_Item
      label: post_setDefault_Item['hostname']

  when: validatedSetDefaultVersionDeviceDictList|length > 0

# Print the skipped list if any devices were skipped
- debug: var=skippedSetDefaultDeviceDictList
  when: skippedSetDefaultDeviceDictList|length > 0
