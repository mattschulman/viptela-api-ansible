---
  
# Get the vedge info from vManage - only get valid devices so that keys like 'host-name' are present.
- name: "# Get edge device info from vManage"
  uri:
    url: "https://{{ ansible_host }}/dataservice/system/device/vedges/?validity=valid"
    method: GET
    headers:
      Cookie: "{{ login_result.set_cookie }}"
    validate_certs: no
    return_content: yes
  register: software_result

# - debug: var=software_result.json.data

# Validate that for each device in the input list, each version is in the availableVersions list for the device
# The validatedDeleteVersionDeviceDictList list will contain each device, along with valid versions or skipped versions.
- name: "# Validate that input versions are installed"
  ansible.builtin.set_fact:
    validatedDeleteVersionDeviceDictList: "{{ deviceDictList |  validate_versions(software_result.json.data) }}"

- debug: var=validatedDeleteVersionDeviceDictList

# Generate the POST body, send the POST, and receive the jobID as response.
- block:
  # Build the POST body
  - name: "# Generate the body for the Install POST Message"
    ansible.builtin.set_fact:
      deleteVersionPayloadDict: "{{ validatedDeleteVersionDeviceDictList | generate_delete_version_payload }}"

  - debug: var=deleteVersionPayloadDict

  # Build the POST and send to vManage, getting the jobID back.
  - name: "# Delete Version on vEdge"
    uri:
      method: POST
      url: "https://{{ ansible_host }}/dataservice/device/action/removepartition"
      headers:
        Cookie: "{{ login_result.set_cookie }}"
        X-XSRF-TOKEN: "{{ token_result.content }}"
        Content-Type: 'application/json'
      body_format: json
      body: "{{ deleteVersionPayloadDict }}"
      validate_certs: no
    register: deleteVersion_result

  - debug: var=deleteVersion_result.json.id

  # Keep retrying to get the info from the job until the status is 'done'.
  - name: "# Get default version status and repeat until Complete - FAILED == In Progress"
    uri:
      method: GET
      url: "https://{{ ansible_host }}/dataservice/device/action/status/{{ deleteVersion_result.json.id }}"
      headers:
        Cookie: "{{ login_result.set_cookie }}"
      validate_certs: no
      return_content: yes
    register: deleteVersion_status
    until: deleteVersion_status.json.summary.status == 'done'
    retries: 60
    delay: 60

  - debug:
      msg:
        currentActivity: "{{ deleteVersion_status.json.data[0].currentActivity }}"
        status: "{{ deleteVersion_status.json.data[0].status }}"
        activity: "{{ deleteVersion_status.json.data[0].activity }}"

  # Get the device info for valid vedges again to be able to validate the versions were deleted.
  - name: "# Get Device info from vManage to verify deletion"
    uri:
      url: "https://{{ ansible_host }}/dataservice/system/device/vedges/?validity=valid"
      method: GET
      headers:
        Cookie: "{{ login_result.set_cookie }}"
      validate_certs: no
      return_content: yes
    register: post_delete_result

  # - debug: var=post_delete_result.json.data

  # For each device in the validatedDeviceList, loop through the external tasks, passing in the device info 
  # for the device where the hostname matches.  The external tasks will validate that the versions were removed.
  - name: "# Validate version removal successful"
    ansible.builtin.include_tasks:
      file: "validate_software_removal.yml"
    vars:
      postDeleteResultItem: "{{ post_delete_result.json.data | selectattr('host-name', 'defined') | selectattr('host-name', 'equalto', postDeleteItem['hostname']) | list }}"
    loop: "{{ validatedDeleteVersionDeviceDictList }}"
    loop_control:
      loop_var: postDeleteItem
      label: postDeleteItem['hostname']

  when: validatedDeleteVersionDeviceDictList | selectattr('versionsToDelete') | list | length > 0

- name: "# Display skipped versions - Versions that were not deleted"
  debug:
    msg: "{{ skippedItem['hostname'] }} had the following versions skipped: {{ skippedItem['skippedVersions'] }}"
  loop: "{{ validatedDeleteVersionDeviceDictList }}"
  loop_control:
    loop_var: skippedItem
    label: skippedItem['hostname']
  when: skippedItem['skippedVersions'] | length > 0


